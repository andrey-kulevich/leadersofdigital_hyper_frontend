{"version":3,"sources":["utils.ts","components/HeartRateChart.tsx","components/HeartRateTable.tsx","components/HeartRateSummary.tsx","hooks/useHttp.tsx","components/Header.tsx","components/ContentLoader.tsx","components/FiltersPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["beautifyDate","date","slice","replace","useStyles","makeStyles","theme","createStyles","chartPaper","marginTop","spacing","padding","minHeight","HeartRateChart","data","deviations","classes","chartData","labels","confirmTime","map","elem","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderJoinStyle","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","pointHitRadius","systolic","diastolic","pulse","showLine","systolicDeviation","diastolicDeviation","pulseDeviation","Paper","variant","className","options","responsive","maintainAspectRatio","scales","yAxes","display","ticks","suggestedMin","elements","point","radius","context","dataset","dataIndex","type","paper","marginBottom","maxHeight","container","normal","color","warning","palette","secondary","main","fontWeight","fontSize","HeartRateTable","averageValues","TableContainer","Table","stickyHeader","size","aria-label","TableHead","TableRow","TableCell","TableBody","row","index","description","Math","abs","root","HeartRateSummary","min","max","average","Grid","direction","item","xs","Typography","align","List","dense","ListItem","ListItemIcon","ListItemText","primary","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","token","a","headers","JSON","stringify","fetch","process","response","json","ok","message","clearError","flexGrow","icon","link","textDecoration","Header","user","setUser","useEffect","document","URL","substr","length","then","res","AppBar","position","Toolbar","Container","justify","firstName","lastName","Button","button","startIcon","href","telegramUsername","ContentLoader","alignItems","CircularProgress","width","FiltersPanel","filterBy","setFilterBy","filter","setFilter","TextField","select","id","value","onChange","e","target","MenuItem","App","setData","filteredData","setFilteredData","reformatted","first","Date","second","round","getMonth","getFullYear","getAverageData","tmp","generateChartData","floor","reduce","b","forEach","push","generateDeviationsData","apply","getMinData","getMaxData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.df1f8682.chunk.js","sourcesContent":["export function getWeekDates() {\r\n\r\n    let now = new Date();\r\n    let dayOfWeek = now.getDay();\r\n    let numDay = now.getDate();\r\n\r\n    let start = new Date(now);\r\n    start.setDate(numDay - dayOfWeek);\r\n    start.setHours(0, 0, 0, 0);\r\n\r\n    let end = new Date(now);\r\n    end.setDate(numDay + (7 - dayOfWeek));\r\n    end.setHours(0, 0, 0, 0);\r\n\r\n    return [start, end];\r\n}\r\n\r\nexport function dateDiff(first: Date, second: Date) {\r\n    // @ts-ignore\r\n    return Math.round((second - first) / (1000*60*60*24));\r\n}\r\n\r\nexport function beautifyDate(date: string): string {\r\n    return date.slice(5, -3).replace('T', ' ')\r\n}\r\n","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport {Paper} from \"@material-ui/core\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {IChartData, IChartDeviationsData} from \"../App\";\r\nimport {beautifyDate} from \"../utils\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        chartPaper: {\r\n            marginTop: theme.spacing(3),\r\n            padding: theme.spacing(2),\r\n            minHeight: 300,\r\n        }\r\n    }),\r\n);\r\n\r\nexport const HeartRateChart = ({data, deviations}: {data: IChartData, deviations: IChartDeviationsData}) => {\r\n    const classes = useStyles()\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n            yAxes: [{\r\n                display: true,\r\n                ticks: {\r\n                    suggestedMin: 1,\r\n                }\r\n            }]\r\n        },\r\n        elements: {\r\n            point: {\r\n                radius : (context: any) => {\r\n                    let value = context.dataset.data[context.dataIndex];\r\n                    return value === 0 ? 0 : 5;\r\n                },\r\n                display: false\r\n            }\r\n        }\r\n    }\r\n\r\n    const chartData = {\r\n        labels: data.confirmTime.map(elem => beautifyDate(elem)),\r\n        datasets: [\r\n            {\r\n                label: 'Систолическое',\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgb(255,134,0)',\r\n                borderColor: 'rgb(255,134,0)',\r\n                borderCapStyle: 'butt',\r\n                borderJoinStyle: 'miter',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: data.systolic\r\n            },\r\n            {\r\n                label: 'Диастолическое',\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgb(0,159,255)',\r\n                borderColor: 'rgb(0,159,255)',\r\n                borderCapStyle: 'butt',\r\n                borderJoinStyle: 'miter',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: data.diastolic\r\n            },\r\n            {\r\n                label: 'Пульс',\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgb(248,104,104)',\r\n                borderColor: 'rgb(248,104,104)',\r\n                borderCapStyle: 'butt',\r\n                borderJoinStyle: 'miter',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: data.pulse\r\n            },\r\n            {\r\n                label: 'Отклонения систолическое',\r\n                fill: false,\r\n                showLine: false,\r\n                backgroundColor: 'rgb(255,0,0)',\r\n                data: deviations.systolicDeviation\r\n            },\r\n            {\r\n                label: 'Отклонения диастолическое',\r\n                fill: false,\r\n                showLine: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgb(255,0,0)',\r\n                data: deviations.diastolicDeviation\r\n            },\r\n            {\r\n                label: 'Отклонения пульс',\r\n                fill: false,\r\n                showLine: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgb(255,0,0)',\r\n                data: deviations.pulseDeviation\r\n            },\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <Paper variant='outlined' className={classes.chartPaper}>\r\n            <Line data={chartData} options={options} type={null}/>\r\n        </Paper>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {ISummaryData, ITableData} from \"../App\";\r\nimport {beautifyDate} from \"../utils\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        paper: {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(2),\r\n            maxHeight: 250,\r\n        },\r\n        container: {\r\n            maxHeight: 250,\r\n        },\r\n        normal: {\r\n            color: '#000000'\r\n        },\r\n        warning: {\r\n            color: theme.palette.secondary.main,\r\n            fontWeight: 'bold',\r\n            fontSize: 18\r\n        },\r\n    }),\r\n);\r\n\r\nexport const HeartRateTable = ({data, averageValues}: {data: ITableData[], averageValues: ISummaryData}) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Paper variant='outlined' className={classes.paper}>\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Время</TableCell>\r\n                            <TableCell>Комментарий</TableCell>\r\n                            <TableCell>Систолическое давление</TableCell>\r\n                            <TableCell>Диастолическое давление</TableCell>\r\n                            <TableCell>Пульс</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.map((row, index) => (\r\n                            <TableRow key={index}>\r\n                                <TableCell>{beautifyDate(row.confirmTime)}</TableCell>\r\n                                <TableCell>{row.description}</TableCell>\r\n                                <TableCell>\r\n                                    <span className={Math.abs(row.systolic - averageValues.systolic) > 20 ?\r\n                                        classes.warning : classes.normal}>\r\n                                        {row.systolic}\r\n                                    </span>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <span className={Math.abs(row.diastolic - averageValues.diastolic) > 20 ?\r\n                                        classes.warning : classes.normal}>\r\n                                        {row.diastolic}\r\n                                    </span>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <span className={Math.abs(row.pulse - averageValues.pulse) > 20 ?\r\n                                        classes.warning : classes.normal}>\r\n                                        {row.pulse}\r\n                                    </span>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Paper>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Grid, List, ListItem, ListItemIcon, ListItemText,\r\n    Paper,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport {ISummaryData} from \"../App\";\r\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\r\nimport TrendingDownIcon from '@material-ui/icons/TrendingDown';\r\nimport TrendingFlatIcon from '@material-ui/icons/TrendingFlat';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            marginTop: theme.spacing(1),\r\n            padding: theme.spacing(2),\r\n            minHeight: 50\r\n        },\r\n    }),\r\n);\r\n\r\nexport const HeartRateSummary = (\r\n    {min, max, average}: { min: ISummaryData, max: ISummaryData, average: ISummaryData }) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Paper variant='outlined' className={classes.root}>\r\n            <Grid container direction='row' spacing={2}>\r\n                <Grid item xs={4}>\r\n                    <Paper variant='outlined'>\r\n                        <Typography variant='h6' align='center'>Систолическое давление</Typography>\r\n                        <List dense>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <TrendingUpIcon color='secondary'/>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={'Максимальное - ' + max.systolic}/>\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <TrendingDownIcon color='primary'/>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={'Минимальное - ' + min.systolic}/>\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <TrendingFlatIcon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={'Среднее - ' + average.systolic}/>\r\n                            </ListItem>\r\n                        </List>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Paper variant='outlined'>\r\n                        <Typography variant='h6' align='center'>Диастолическое давление</Typography>\r\n                        <List dense>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <TrendingUpIcon color='secondary'/>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={'Максимальное - ' + max.diastolic}/>\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <TrendingDownIcon color='primary'/>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={'Минимальное - ' + min.diastolic}/>\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <TrendingFlatIcon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={'Среднее - ' + average.diastolic}/>\r\n                            </ListItem>\r\n                        </List>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Paper variant='outlined'>\r\n                        <Typography variant='h6' align='center'>Пульс</Typography>\r\n                        <List dense>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <TrendingUpIcon color='secondary'/>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={'Максимальный - ' + max.pulse}/>\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <TrendingDownIcon color='primary'/>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={'Минимальный - ' + min.pulse}/>\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                <ListItemIcon>\r\n                                    <TrendingFlatIcon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={'Средний - ' + average.pulse}/>\r\n                            </ListItem>\r\n                        </List>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    )\r\n}\r\n","import { useCallback, useState } from 'react';\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst request = useCallback(async (url, method, body, token) => {\r\n\t\tsetLoading(true);\r\n\t\ttry {\r\n\t\t\tconst headers: any = {};\r\n\t\t\tif (body) {\r\n\t\t\t\tbody = JSON.stringify(body);\r\n\t\t\t\theaders['Content-Type'] = 'application/json;charset=utf-8';\r\n\t\t\t}\r\n\t\t\tif (token) headers['Authorization'] = `Basic ${token}`;\r\n\t\t\tconst response = await fetch(`${process.env.REACT_APP_BASE_DEV_URL}${url}`, { method, body, headers });\r\n\t\t\tlet data = null;\r\n\t\t\tif (method === 'POST' || method === 'GET') data = await response.json();\r\n\t\t\tif (!response.ok) return data?.message;\r\n\t\t\tsetLoading(false);\r\n\t\t\treturn data;\r\n\t\t} catch (e) {\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetError(e.message);\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst clearError = () => setError(null);\r\n\r\n\treturn { loading, request, error, clearError };\r\n};\r\n","// @ts-nocheck\r\nimport React, {useEffect, useState} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Button, Container, Grid} from \"@material-ui/core\";\r\nimport {useHttp} from \"../hooks/useHttp\";\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport TelegramIcon from '@material-ui/icons/Telegram';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\troot: {\r\n\t\t\tflexGrow: 1,\r\n\t\t\tmarginBottom: theme.spacing(2),\r\n\t\t},\r\n\t\ticon: {\r\n\t\t\tmarginTop: theme.spacing(0.5)\r\n\t\t},\r\n\t\tlink: {\r\n\t\t\ttextDecoration: 'none'\r\n\t\t}\r\n\t}),\r\n);\r\n\r\nexport default function Header(): JSX.Element {\r\n\tconst classes = useStyles();\r\n\tconst [user, setUser] = useState()\r\n\tconst { request } = useHttp()\r\n\r\n\tuseEffect(() => {\r\n\t\trequest(\r\n\t\t\t'users/user?snils=' + document.URL.substr(document.URL.length - 16),\r\n\t\t\t'GET',\r\n\t\t\tnull,\r\n\t\t\t'OTYwODg3MjU1NTpwYXNzd29yZA==').then(res => setUser(res))\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<AppBar position='static' color='transparent'>\r\n\t\t\t\t<Toolbar variant='dense'>\r\n\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t{user ?\r\n\t\t\t\t\t\t\t<Grid container direction='row' spacing={2} justify=\"space-between\">\r\n\t\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t\t<Grid container direction='row' spacing={2}>\r\n\t\t\t\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography variant='h5'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{user.firstName} {user.lastName}: сердечные показатели\r\n\t\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t\t\t\t<FavoriteBorderIcon color='secondary' className={classes.icon}/>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\t\t\t\t\tstartIcon={<TelegramIcon color='primary'>send</TelegramIcon>}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<a className={classes.link} href={`https://telegram.me/${user.telegramUsername}`}>\r\n\t\t\t\t\t\t\t\t\t\t\tОткрыть в телеграме\r\n\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from \"react\";\r\nimport {CircularProgress, Grid, Typography} from \"@material-ui/core\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        paper: {\r\n            marginTop: theme.spacing(3),\r\n            padding: theme.spacing(2)\r\n        },\r\n    }),\r\n);\r\n\r\nexport const ContentLoader = ({message}:{message:string}) => (\r\n    <div className={useStyles().paper}>\r\n        <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={3}\r\n        >\r\n            <Grid item>\r\n                <CircularProgress />\r\n            </Grid>\r\n            <Grid item>\r\n                <Typography >\r\n                    {message}\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n    </div>\r\n)","import React, { useState } from 'react';\r\nimport { MenuItem, TextField } from '@material-ui/core';\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\troot: {\r\n\t\t\twidth: '10em'\r\n\t\t},\r\n\t}),\r\n);\r\n\r\nexport const FiltersPanel = ({filterBy, setFilterBy}: {filterBy: string[], setFilterBy: Function}) => {\r\n\tconst classes = useStyles();\r\n\tconst [filter, setFilter] = useState<string>(filterBy[0]);\r\n\r\n\treturn (\r\n\t\t<TextField\r\n\t\t\tsize='small'\r\n\t\t\tlabel='Фильтровать по'\r\n\t\t\tselect\r\n\t\t\tid='selectPeriod'\r\n\t\t\tvariant='outlined'\r\n\t\t\tvalue={filter}\r\n\t\t\tclassName={classes.root}\r\n\t\t\tonChange={(e) => {\r\n\t\t\t\tsetFilterBy(e.target.value)\r\n\t\t\t\tsetFilter(e.target.value)\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<MenuItem key={1} value={'week'}>\r\n\t\t\t\tНеделя\r\n\t\t\t</MenuItem>\r\n\t\t\t<MenuItem key={2} value={'month'}>\r\n\t\t\t\tМесяц\r\n\t\t\t</MenuItem>\r\n\t\t\t<MenuItem key={3} value={'year'}>\r\n\t\t\t\tГод\r\n\t\t\t</MenuItem>\r\n\t\t\t<MenuItem key={3} value={'all_time'}>\r\n\t\t\t\tВсе время\r\n\t\t\t</MenuItem>\r\n\t\t</TextField>\r\n\t);\r\n};\r\n","import React, {useEffect, useState} from 'react';\nimport {HeartRateChart} from \"./components/HeartRateChart\";\nimport {Container} from \"@material-ui/core\";\nimport {HeartRateTable} from \"./components/HeartRateTable\";\nimport {HeartRateSummary} from \"./components/HeartRateSummary\";\nimport Header from \"./components/Header\";\nimport {useHttp} from \"./hooks/useHttp\";\nimport {ContentLoader} from \"./components/ContentLoader\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {FiltersPanel} from \"./components/FiltersPanel\";\nimport {dateDiff} from \"./utils\";\n\nexport interface ISummaryData {\n    systolic: number;\n    diastolic: number;\n    pulse: number;\n}\n\nexport interface IChartData {\n    confirmTime: string[];\n    systolic: number[];\n    diastolic: number[];\n    pulse: number[];\n}\n\nexport interface IChartDeviationsData {\n    systolicDeviation: number[];\n    diastolicDeviation: number[];\n    pulseDeviation: number[];\n}\n\nexport interface ITableData {\n    confirmTime: string;\n    description: string;\n    diastolic: number;\n    pulse: number;\n    systolic: number;\n    arrhythmia: number;\n}\n\nfunction App() {\n    const [data, setData] = useState<ITableData[]>([])\n    const [filteredData, setFilteredData] = useState<ITableData[]>([])\n    const {loading, request} = useHttp()\n\n    useEffect(() => {\n        request(\n            'pressure/patient?snils=' + document.URL.substr(document.URL.length - 16),\n            'GET',\n            null,\n            'OTYwODg3MjU1NTpwYXNzd29yZA==')\n            .then((res: ITableData[]) => {\n                let reformatted = res\n                reformatted = reformatted.filter(elem => elem.diastolic > 30 && elem.systolic > 50 && elem.pulse > 40)\n                setData(reformatted)\n            }\n        )\n    }, [])\n\n    useEffect(() => {\n        setFilterBy('week')\n    }, [data])\n\n    const setFilterBy = (filterBy: string) => {\n        switch (filterBy) {\n            case 'week':\n                setFilteredData(data.filter(elem => dateDiff(new Date(elem.confirmTime), new Date()) < 7));\n                break;\n            case 'month':\n                setFilteredData(data.filter(elem => new Date(elem.confirmTime).getMonth() === new Date().getMonth()));\n                break;\n            case 'year':\n                setFilteredData(data.filter(elem => new Date(elem.confirmTime).getFullYear() === new Date().getFullYear()));\n                break;\n            case 'all_time':\n                setFilteredData(data);\n        }\n    }\n\n    const getMaxData = (): ISummaryData => {\n        const tmp = generateChartData();\n        return {\n            systolic: Math.max.apply(null, tmp.systolic),\n            diastolic: Math.max.apply(null, tmp.diastolic),\n            pulse: Math.max.apply(null, tmp.pulse),\n        }\n    }\n\n    const getMinData = (): ISummaryData => {\n        const tmp = generateChartData();\n        return {\n            systolic: Math.min.apply(null, tmp.systolic),\n            diastolic: Math.min.apply(null, tmp.diastolic),\n            pulse: Math.min.apply(null, tmp.pulse),\n        }\n    }\n\n    const getAverageData = (): ISummaryData => {\n        const tmp = generateChartData();\n        return {\n            systolic: Math.floor(tmp.systolic.reduce((a, b) => a + b, 0) / tmp.systolic.length),\n            diastolic: Math.floor(tmp.diastolic.reduce((a, b) => a + b, 0) / tmp.diastolic.length),\n            pulse: Math.floor(tmp.pulse.reduce((a, b) => a + b, 0) / tmp.pulse.length),\n        }\n    }\n\n    const generateChartData = (): IChartData => {\n        const chartData: IChartData = {\n            confirmTime: [],\n            systolic: [],\n            diastolic: [],\n            pulse: [],\n        }\n        if (filteredData) {\n            filteredData.forEach((elem) => {\n                chartData.confirmTime.push(elem.confirmTime)\n                chartData.systolic.push(elem.systolic)\n                chartData.diastolic.push(elem.diastolic)\n                chartData.pulse.push(elem.pulse)\n            })\n        }\n        return chartData\n    }\n\n    const generateDeviationsData = (): IChartDeviationsData => {\n        const average = getAverageData();\n        const deviations: IChartDeviationsData = {\n            systolicDeviation: [],\n            diastolicDeviation: [],\n            pulseDeviation: [],\n        }\n        if (filteredData) {\n            filteredData.forEach((elem) => {\n                if (Math.abs(elem.systolic - average.systolic) > 20) deviations.systolicDeviation.push(elem.systolic)\n                else deviations.systolicDeviation.push(0)\n                if (Math.abs(elem.diastolic - average.diastolic) > 20) deviations.diastolicDeviation.push(elem.diastolic)\n                else deviations.diastolicDeviation.push(0)\n                if (Math.abs(elem.pulse - average.pulse) > 20) deviations.pulseDeviation.push(elem.pulse)\n                else deviations.pulseDeviation.push(0)\n            })\n        }\n        return deviations\n    }\n\n    return (\n        loading ?\n            <ContentLoader message={'Идет загрузка данных...'}/>\n            :\n            <>\n                {data ?\n                    <>\n                        <Header/>\n                        <Container>\n                            <FiltersPanel filterBy={['week', 'month', 'year', 'all_time']} setFilterBy={setFilterBy}/>\n                            <HeartRateChart data={generateChartData()} deviations={generateDeviationsData()}/>\n                            <HeartRateSummary min={getMinData()} max={getMaxData()} average={getAverageData()}/>\n                            <HeartRateTable data={filteredData} averageValues={getAverageData()}/>\n                        </Container>\n                    </>\n                    :\n                    <Container>\n                        <Typography variant='h5' align='center'>\n                            Не удалось загрузить данные, проверьте правильность ссылки\n                        </Typography>\n                    </Container>\n                }\n            </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}